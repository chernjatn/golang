// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package invsvc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InvsvcClient is the client API for Invsvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvsvcClient interface {
	GetInventory(ctx context.Context, in *GetInventoryRequest, opts ...grpc.CallOption) (*GetInventoryResponse, error)
	GetRegionInventory(ctx context.Context, in *GetRegionInventoryRequest, opts ...grpc.CallOption) (*GetRegionInventoryResponse, error)
	GetRegionMaxInventory(ctx context.Context, in *GetRegionInventoryRequest, opts ...grpc.CallOption) (*GetRegionMaxInventoryResponse, error)
	GetRegionLastInventory(ctx context.Context, in *GetRegionInventoryRequest, opts ...grpc.CallOption) (*GetRegionLastInventoryResponse, error)
	GetRegionStoreHas(ctx context.Context, in *GetRegionInventoryRequest, opts ...grpc.CallOption) (*GetRegionStoreHasResponse, error)
	GetRegionStoreHasCnt(ctx context.Context, in *GetRegionInventoryRequest, opts ...grpc.CallOption) (*GetRegionStoreHasCntResponse, error)
}

type invsvcClient struct {
	cc grpc.ClientConnInterface
}

func NewInvsvcClient(cc grpc.ClientConnInterface) InvsvcClient {
	return &invsvcClient{cc}
}

func (c *invsvcClient) GetInventory(ctx context.Context, in *GetInventoryRequest, opts ...grpc.CallOption) (*GetInventoryResponse, error) {
	out := new(GetInventoryResponse)
	err := c.cc.Invoke(ctx, "/inventory.Invsvc/GetInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invsvcClient) GetRegionInventory(ctx context.Context, in *GetRegionInventoryRequest, opts ...grpc.CallOption) (*GetRegionInventoryResponse, error) {
	out := new(GetRegionInventoryResponse)
	err := c.cc.Invoke(ctx, "/inventory.Invsvc/GetRegionInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invsvcClient) GetRegionMaxInventory(ctx context.Context, in *GetRegionInventoryRequest, opts ...grpc.CallOption) (*GetRegionMaxInventoryResponse, error) {
	out := new(GetRegionMaxInventoryResponse)
	err := c.cc.Invoke(ctx, "/inventory.Invsvc/GetRegionMaxInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invsvcClient) GetRegionLastInventory(ctx context.Context, in *GetRegionInventoryRequest, opts ...grpc.CallOption) (*GetRegionLastInventoryResponse, error) {
	out := new(GetRegionLastInventoryResponse)
	err := c.cc.Invoke(ctx, "/inventory.Invsvc/GetRegionLastInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invsvcClient) GetRegionStoreHas(ctx context.Context, in *GetRegionInventoryRequest, opts ...grpc.CallOption) (*GetRegionStoreHasResponse, error) {
	out := new(GetRegionStoreHasResponse)
	err := c.cc.Invoke(ctx, "/inventory.Invsvc/GetRegionStoreHas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invsvcClient) GetRegionStoreHasCnt(ctx context.Context, in *GetRegionInventoryRequest, opts ...grpc.CallOption) (*GetRegionStoreHasCntResponse, error) {
	out := new(GetRegionStoreHasCntResponse)
	err := c.cc.Invoke(ctx, "/inventory.Invsvc/GetRegionStoreHasCnt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvsvcServer is the server API for Invsvc service.
// All implementations must embed UnimplementedInvsvcServer
// for forward compatibility
type InvsvcServer interface {
	GetInventory(context.Context, *GetInventoryRequest) (*GetInventoryResponse, error)
	GetRegionInventory(context.Context, *GetRegionInventoryRequest) (*GetRegionInventoryResponse, error)
	GetRegionMaxInventory(context.Context, *GetRegionInventoryRequest) (*GetRegionMaxInventoryResponse, error)
	GetRegionLastInventory(context.Context, *GetRegionInventoryRequest) (*GetRegionLastInventoryResponse, error)
	GetRegionStoreHas(context.Context, *GetRegionInventoryRequest) (*GetRegionStoreHasResponse, error)
	GetRegionStoreHasCnt(context.Context, *GetRegionInventoryRequest) (*GetRegionStoreHasCntResponse, error)
	mustEmbedUnimplementedInvsvcServer()
}

// UnimplementedInvsvcServer must be embedded to have forward compatible implementations.
type UnimplementedInvsvcServer struct {
}

func (UnimplementedInvsvcServer) GetInventory(context.Context, *GetInventoryRequest) (*GetInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInventory not implemented")
}
func (UnimplementedInvsvcServer) GetRegionInventory(context.Context, *GetRegionInventoryRequest) (*GetRegionInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegionInventory not implemented")
}
func (UnimplementedInvsvcServer) GetRegionMaxInventory(context.Context, *GetRegionInventoryRequest) (*GetRegionMaxInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegionMaxInventory not implemented")
}
func (UnimplementedInvsvcServer) GetRegionLastInventory(context.Context, *GetRegionInventoryRequest) (*GetRegionLastInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegionLastInventory not implemented")
}
func (UnimplementedInvsvcServer) GetRegionStoreHas(context.Context, *GetRegionInventoryRequest) (*GetRegionStoreHasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegionStoreHas not implemented")
}
func (UnimplementedInvsvcServer) GetRegionStoreHasCnt(context.Context, *GetRegionInventoryRequest) (*GetRegionStoreHasCntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegionStoreHasCnt not implemented")
}
func (UnimplementedInvsvcServer) mustEmbedUnimplementedInvsvcServer() {}

// UnsafeInvsvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvsvcServer will
// result in compilation errors.
type UnsafeInvsvcServer interface {
	mustEmbedUnimplementedInvsvcServer()
}

func RegisterInvsvcServer(s grpc.ServiceRegistrar, srv InvsvcServer) {
	s.RegisterService(&Invsvc_ServiceDesc, srv)
}

func _Invsvc_GetInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvsvcServer).GetInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Invsvc/GetInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvsvcServer).GetInventory(ctx, req.(*GetInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invsvc_GetRegionInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvsvcServer).GetRegionInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Invsvc/GetRegionInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvsvcServer).GetRegionInventory(ctx, req.(*GetRegionInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invsvc_GetRegionMaxInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvsvcServer).GetRegionMaxInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Invsvc/GetRegionMaxInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvsvcServer).GetRegionMaxInventory(ctx, req.(*GetRegionInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invsvc_GetRegionLastInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvsvcServer).GetRegionLastInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Invsvc/GetRegionLastInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvsvcServer).GetRegionLastInventory(ctx, req.(*GetRegionInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invsvc_GetRegionStoreHas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvsvcServer).GetRegionStoreHas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Invsvc/GetRegionStoreHas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvsvcServer).GetRegionStoreHas(ctx, req.(*GetRegionInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Invsvc_GetRegionStoreHasCnt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvsvcServer).GetRegionStoreHasCnt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.Invsvc/GetRegionStoreHasCnt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvsvcServer).GetRegionStoreHasCnt(ctx, req.(*GetRegionInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Invsvc_ServiceDesc is the grpc.ServiceDesc for Invsvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Invsvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inventory.Invsvc",
	HandlerType: (*InvsvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInventory",
			Handler:    _Invsvc_GetInventory_Handler,
		},
		{
			MethodName: "GetRegionInventory",
			Handler:    _Invsvc_GetRegionInventory_Handler,
		},
		{
			MethodName: "GetRegionMaxInventory",
			Handler:    _Invsvc_GetRegionMaxInventory_Handler,
		},
		{
			MethodName: "GetRegionLastInventory",
			Handler:    _Invsvc_GetRegionLastInventory_Handler,
		},
		{
			MethodName: "GetRegionStoreHas",
			Handler:    _Invsvc_GetRegionStoreHas_Handler,
		},
		{
			MethodName: "GetRegionStoreHasCnt",
			Handler:    _Invsvc_GetRegionStoreHasCnt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "invsvc.proto",
}
